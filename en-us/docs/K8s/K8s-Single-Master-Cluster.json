{
  "filename": "K8s-Single-Master-Cluster.md",
  "__html": "<p>[TOC]</p>\n<p>单Master服务器规划：</p>\n<table>\n<thead>\n<tr>\n<th>角色</th>\n<th>IP</th>\n<th>组件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>master</td>\n<td>192.168.137.101</td>\n<td></td>\n</tr>\n<tr>\n<td>node1</td>\n<td>192.168.137.102</td>\n<td></td>\n</tr>\n<tr>\n<td>node2</td>\n<td>192.168.137.103</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"%E4%B8%80%E3%80%81-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87\">一、 环境准备 <a class=\"header-anchor\" href=\"#%E4%B8%80%E3%80%81-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87\">#</a></h1>\n<h3 id=\"1.-%E5%88%87%E6%8D%A2%E5%8F%8A%E6%B7%BB%E5%8A%A0%E5%AE%89%E8%A3%85%E6%BA%90\">1. 切换及添加安装源 <a class=\"header-anchor\" href=\"#1.-%E5%88%87%E6%8D%A2%E5%8F%8A%E6%B7%BB%E5%8A%A0%E5%AE%89%E8%A3%85%E6%BA%90\">#</a></h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 安装 wget</span>\nyum -y install wget\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 备份主仓库</span>\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 切换主仓库</span>\nwget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 设置epel仓库</span>\nwget -O /etc/yum.repos.d/epel-7.repo https://mirrors.aliyun.com/repo/epel-7.repo\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 设置Docker仓库</span>\nwget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 设置K8s源仓库</span>\ncat &lt;&lt; EOF &gt; /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 清除并重建缓存，禁掉GPG验证检查，没有签名的软件安装加这个参数</span>\nyum clean all &amp;&amp; yum makecache fast --nogpgcheck\n</code></pre>\n<h3 id=\"2.-%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96\">2. 安装依赖 <a class=\"header-anchor\" href=\"#2.-%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96\">#</a></h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 安装epel</span>\nyum install -y epel-release\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 安装依赖</span>\nyum install -y \\\n  vim* \\\n  lrzsz \\\n  net-tools \\\n  ifconfig \\\n  yum-utils \\\n  netcat \\\n  ntpdate\n</code></pre>\n<h3 id=\"3.-%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BE%E7%BD%AE\">3. 服务器设置 <a class=\"header-anchor\" href=\"#3.-%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BE%E7%BD%AE\">#</a></h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 关闭防火墙</span>\nsystemctl stop firewalld &amp;&amp; systemctl disable firewalld\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 关闭selinux</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 永久</span>\nsed -i 's/enforcing/disabled/' /etc/selinux/config\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 临时</span>\nsetenforce 0\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 关闭swap</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 临时</span>\nswapoff -a\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 永久</span>\nsed -ri 's/.*swap.*/#&amp;/' /etc/fstab\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 检查，确保swap里面没有东西</span>\nfree -m\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 根据规划设置主机名</span>\nhostnamectl set-hostname &lt;hostname&gt;\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看修改结果</span>\nhostnamectl status\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 修改hosts文件</span>\necho \"127.0.0.1 $(hostname)\" &gt;&gt; /etc/hosts\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 在master添加hosts</span>\ncat &gt;&gt; /etc/hosts &lt;&lt; EOF\n192.168.137.101 master\n192.168.137.102 node1\nEOF\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 配置桥接流量</span>\ncat &lt;&lt; EOF | sudo tee /etc/modules-load.d/k8s.conf\nbr_netfilter\nEOF\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 将桥接的IPv4流量传递到iptables的链</span>\ncat &lt;&lt; EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 配置生效</span>\nsysctl --system\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 时间同步</span>\nntpdate time.windows.com\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 关机 重启</span>\nshutdown now \nshutdown -r now\nreboot -n\n</code></pre>\n<h1 id=\"%E4%BA%8C%E3%80%81%E5%AE%89%E8%A3%85docker%2Fkubeadm%2Fkubelet\">二、安装Docker/kubeadm/kubelet <a class=\"header-anchor\" href=\"#%E4%BA%8C%E3%80%81%E5%AE%89%E8%A3%85docker%2Fkubeadm%2Fkubelet\">#</a></h1>\n<p>Kubernetes默认CRI（容器运行时）为Docker，因此先安装Docker。</p>\n<h3 id=\"1.-%E5%AE%89%E8%A3%85docker\">1. 安装Docker <a class=\"header-anchor\" href=\"#1.-%E5%AE%89%E8%A3%85docker\">#</a></h3>\n<ul>\n<li><a href=\"https://docs.docker.com/engine/install/centos/\">https://docs.docker.com/engine/install/centos/</a></li>\n</ul>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 配置仓库</span>\nsudo yum install -y yum-utils\nsudo yum-config-manager \\\n  --add-repo \\\n  https://download.docker.com/linux/centos/docker-ce.repo\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 清除之前的Docker</span>\nsudo yum remove docker \\\n          docker-client \\\n          docker-client-latest \\\n          docker-common \\\n          docker-latest \\\n          docker-latest-logrotate \\\n          docker-logrotate \\\n          docker-engine\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 查看Docker版本</span>\nyum list docker-ce --showduplicates | sort -r\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 安装Docker</span>\nyum -y install docker-ce-18.06.1.ce-3.el7\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 启动Docker并设置自动重启</span>\nsystemctl start docker &amp;&amp; systemctl enable docker\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 配置镜像下载加速器：</span>\ncat &gt; /etc/docker/daemon.json &lt;&lt; EOF\n{\n  \"registry-mirrors\": [\"https://rv4ppfhe.mirror.aliyuncs.com\"],\n  \"exec-opts\": [\"native.cgroupdriver=systemd\"]\n}\nEOF\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 更新配置后重启</span>\nsystemctl daemon-reload &amp;&amp; systemctl restart docker\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 普通用户操作Docker</span>\nsudo cat /etc/group | grep docker\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> docker用户组不存在则添加用户组</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> sudo groupadd docker </span>\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 将当前用户添加到docker组中</span>\nsudo usermod -aG docker $USER\nsudo usermod -aG dockerroot $USER\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 开启Docker远程访问</span>\nvim /lib/systemd/system/docker.service\nExecStart=/usr/bin/dockerd -H unix:///var/run/docker.sock -H tcp://0.0.0.0:2375\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 查看2375端口是否开启</span>\nnetstat -nlp | grep docker\n</code></pre>\n<h3 id=\"2.-%E5%AE%89%E8%A3%85docker-compose\">2. 安装Docker Compose <a class=\"header-anchor\" href=\"#2.-%E5%AE%89%E8%A3%85docker-compose\">#</a></h3>\n<ul>\n<li><a href=\"https://docs.docker.com/compose/install/\">https://docs.docker.com/compose/install/</a></li>\n<li><a href=\"https://docs.docker.com/compose/install/compose-plugin/\">https://docs.docker.com/compose/install/compose-plugin/</a></li>\n</ul>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 安装Docker Compose</span>\nyum install -y docker-compose-plugin\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 下载</span>\ncurl -SL https://github.com/docker/compose/releases/download/v2.7.0/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 添加执行权限</span>\nchmod +x /usr/local/bin/docker-compose\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 链接</span>\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 测试</span>\ndocker-compose version\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 传输文件</span>\nscp /usr/local/bin/docker-compose root@192.168.137.102:/usr/local/bin/docker-compose\n</code></pre>\n<h3 id=\"3.-docker-overlay2%E5%8D%A0%E7%94%A8%E5%A4%A7%E9%87%8F%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95\">3. Docker overlay2占用大量磁盘空间解决办法 <a class=\"header-anchor\" href=\"#3.-docker-overlay2%E5%8D%A0%E7%94%A8%E5%A4%A7%E9%87%8F%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95\">#</a></h3>\n<ol>\n<li>首先找到overlay2目录</li>\n</ol>\n<blockquote>\n<p>cd /var/lib/docker/overlay2</p>\n</blockquote>\n<ol start=\"2\">\n<li>查看文件的大小</li>\n</ol>\n<blockquote>\n<p>du -h --max-depth=1 /var/lib/docker/overlay2 | grep [MGT] | sort -nr\n如下所示，找到大小为500G的文件</p>\n</blockquote>\n<ol start=\"3\">\n<li>查看占用空间的pid，以及对应的容器名称</li>\n</ol>\n<blockquote>\n<p>docker ps -q | xargs docker inspect --format '{{.State.Pid}}, {{.Name}}, {{.GraphDriver.Data.WorkDir}}' | grep &quot;09151aa1dd70a8884a9f6ab3f31b0b530be8a7a5fb78c25f4f51901440089681&quot;\n结果如下：</p>\n</blockquote>\n<ol start=\"4\">\n<li>解决方法（会删除对应的容器和对应镜像）：</li>\n</ol>\n<blockquote>\n<p>docker stop ainews_processB &amp;&amp; docker rm ainews_processB &amp;&amp; docker rmi image_id</p>\n</blockquote>\n<h3 id=\"4.-%E5%AE%89%E8%A3%85k8s\">4. 安装K8s <a class=\"header-anchor\" href=\"#4.-%E5%AE%89%E8%A3%85k8s\">#</a></h3>\n<ul>\n<li><a href=\"https://kubernetes.io/docs/getting-started-guides/kubeadm/\">https://kubernetes.io/docs/getting-started-guides/kubeadm/</a></li>\n<li><a href=\"https://kubernetes.io/docs/setup/production-environment/tools/\">https://kubernetes.io/docs/setup/production-environment/tools/</a></li>\n<li><a href=\"https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/\">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/</a></li>\n</ul>\n<p>由于版本更新频繁，这里指定版本号部署：</p>\n<ul>\n<li>kubelet：systemd守护进程管理</li>\n<li>kubeadm：部署工具</li>\n<li>kubectl：k8s命令行管理工具</li>\n</ul>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 检查Master6443端口占用</span>\nnc 127.0.0.1 6443\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\">  卸载旧版本</span>\nyum remove -y kubelet kubeadm kubectl\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 查看k8s的版本</span>\nyum list kubelet --showduplicates | sort -r \n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 安装K8s</span>\nyum install -y \\\n  kubelet-1.18.0 \\\n  kubeadm-1.18.0 \\\n  kubectl-1.18.0\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 启动kubelet</span>\nsystemctl start kubelet &amp;&amp; systemctl enable kubelet\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 查看kubelet状态</span>\nsystemctl status kubelet\n</code></pre>\n<h1 id=\"%E4%B8%89%E3%80%81%E5%88%9D%E5%A7%8B%E5%8C%96k8s-master%E8%8A%82%E7%82%B9\">三、初始化K8s Master节点 <a class=\"header-anchor\" href=\"#%E4%B8%89%E3%80%81%E5%88%9D%E5%A7%8B%E5%8C%96k8s-master%E8%8A%82%E7%82%B9\">#</a></h1>\n<h3 id=\"1.-%E5%9C%A8192.168.137.101%EF%BC%88master%EF%BC%89%E6%89%A7%E8%A1%8C%E5%88%9D%E5%A7%8B%E5%8C%96%E5%91%BD%E4%BB%A4\">1. 在192.168.137.101（Master）执行初始化命令 <a class=\"header-anchor\" href=\"#1.-%E5%9C%A8192.168.137.101%EF%BC%88master%EF%BC%89%E6%89%A7%E8%A1%8C%E5%88%9D%E5%A7%8B%E5%8C%96%E5%91%BD%E4%BB%A4\">#</a></h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看kubeadm需要下载的镜像</span>\nkubeadm config images list \n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 提前下载需要的镜像</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> kubeadm config images pull</span>\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 挨个下载以上镜像，由于是国外镜像，使用阿里云镜像仓库下载</span>\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.18.0\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.18.0\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.18.0\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.18.0\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.3-0\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.6.7\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 因为coredns是带二级目录的，所以要多执行这一步</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:v1.8.6 registry.cn-hangzhou.aliyuncs.com/google_containers/coredns/coredns:1.6.7</span>\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 查看eth0的inet私有网络地址，复制出来填入apiserver-advertise-address</span>\nip addr\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 初始化Master节点</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> image-respository  镜像仓库的地址</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> service-cidr pod-network-cidr 设定两个子网范围，不能和apiserver冲突</span>\nkubeadm init \\\n  --apiserver-advertise-address=192.168.137.101 \\\n  --image-repository registry.aliyuncs.com/google_containers \\\n  --kubernetes-version v1.18.0 \\\n  --service-cidr=10.96.0.0/12 \\\n  --pod-network-cidr=10.244.0.0/16 \\\n  --ignore-preflight-errors=all\n</code></pre>\n<p>打印如下信息成功：</p>\n<pre><code class=\"language-shell\">W0823 17:52:46.436675    8256 configset.go:202] WARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]\n[init] Using Kubernetes version: v1.18.0\n[preflight] Running pre-flight checks\n[preflight] Pulling images required for setting up a Kubernetes cluster\n[preflight] This might take a minute or two, depending on the speed of your internet connection\n[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'\n[kubelet-start] Writing kubelet environment file with flags to file \"/var/lib/kubelet/kubeadm-flags.env\"\n[kubelet-start] Writing kubelet configuration to file \"/var/lib/kubelet/config.yaml\"\n[kubelet-start] Starting the kubelet\n[certs] Using certificateDir folder \"/etc/kubernetes/pki\"\n[certs] Generating \"ca\" certificate and key\n[certs] Generating \"apiserver\" certificate and key\n[certs] apiserver serving cert is signed for DNS names [master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.137.101]\n[certs] Generating \"apiserver-kubelet-client\" certificate and key\n[certs] Generating \"front-proxy-ca\" certificate and key\n[certs] Generating \"front-proxy-client\" certificate and key\n[certs] Generating \"etcd/ca\" certificate and key\n[certs] Generating \"etcd/server\" certificate and key\n[certs] etcd/server serving cert is signed for DNS names [master localhost] and IPs [192.168.137.101 127.0.0.1 ::1]\n[certs] Generating \"etcd/peer\" certificate and key\n[certs] etcd/peer serving cert is signed for DNS names [master localhost] and IPs [192.168.137.101 127.0.0.1 ::1]\n[certs] Generating \"etcd/healthcheck-client\" certificate and key\n[certs] Generating \"apiserver-etcd-client\" certificate and key\n[certs] Generating \"sa\" key and public key\n[kubeconfig] Using kubeconfig folder \"/etc/kubernetes\"\n[kubeconfig] Writing \"admin.conf\" kubeconfig file\n[kubeconfig] Writing \"kubelet.conf\" kubeconfig file\n[kubeconfig] Writing \"controller-manager.conf\" kubeconfig file\n[kubeconfig] Writing \"scheduler.conf\" kubeconfig file\n[control-plane] Using manifest folder \"/etc/kubernetes/manifests\"\n[control-plane] Creating static Pod manifest for \"kube-apiserver\"\n[control-plane] Creating static Pod manifest for \"kube-controller-manager\"\nW0823 17:53:10.225513    8256 manifests.go:225] the default kube-apiserver authorization-mode is \"Node,RBAC\"; using \"Node,RBAC\"\n[control-plane] Creating static Pod manifest for \"kube-scheduler\"\nW0823 17:53:10.226495    8256 manifests.go:225] the default kube-apiserver authorization-mode is \"Node,RBAC\"; using \"Node,RBAC\"\n[etcd] Creating static Pod manifest for local etcd in \"/etc/kubernetes/manifests\"\n[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory \"/etc/kubernetes/manifests\". This can take up to 4m0s\n[apiclient] All control plane components are healthy after 24.503745 seconds\n[upload-config] Storing the configuration used in ConfigMap \"kubeadm-config\" in the \"kube-system\" Namespace\n[kubelet] Creating a ConfigMap \"kubelet-config-1.18\" in namespace kube-system with the configuration for the kubelets in the cluster\n[upload-certs] Skipping phase. Please see --upload-certs\n[mark-control-plane] Marking the node master as control-plane by adding the label \"node-role.kubernetes.io/master=''\"\n[mark-control-plane] Marking the node master as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]\n[bootstrap-token] Using token: ftlxtx.pqomr1j82debo3ph\n[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles\n[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes\n[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials\n[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token\n[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster\n[bootstrap-token] Creating the \"cluster-info\" ConfigMap in the \"kube-public\" namespace\n[kubelet-finalize] Updating \"/etc/kubernetes/kubelet.conf\" to point to a rotatable kubelet client certificate and key\n[addons] Applied essential addon: CoreDNS\n[addons] Applied essential addon: kube-proxy\n\nYour Kubernetes control-plane has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nYou should now deploy a pod network to the cluster.\nRun \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nThen you can join any number of worker nodes by running the following on each as root:\n\nkubeadm join 192.168.137.101:6443 --token ftlxtx.pqomr1j82debo3ph \\\n    --discovery-token-ca-cert-hash sha256:6406f96f7b11ef7ed750c4da41ac825a63bca63d8dece634197abc23184371ab\n</code></pre>\n<h3 id=\"2.-%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E6%93%8D%E4%BD%9Ck8s%E6%9D%83%E9%99%90\">2. 普通用户操作K8s权限 <a class=\"header-anchor\" href=\"#2.-%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E6%93%8D%E4%BD%9Ck8s%E6%9D%83%E9%99%90\">#</a></h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 切换到普通用户，给普通用户增加操作k8s的权限</span>\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 查看Master节点的情况</span>\nkubectl get nodes\n\nNAME     STATUS     ROLES    AGE     VERSION\nmaster   NotReady   master   2m55s   v1.18.0\n<span class=\"hljs-meta\">\n #</span><span class=\"bash\"> 查看kubelet日志</span>\njournalctl -u kubelet\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 重启kubelet</span>\nsystemctl daemon-reload &amp;&amp; systemctl restart kubelet\n</code></pre>\n<h1 id=\"%E5%9B%9B%E3%80%81%E6%B3%A8%E5%86%8Ck8s-node%E8%8A%82%E7%82%B9\">四、注册K8s Node节点 <a class=\"header-anchor\" href=\"#%E5%9B%9B%E3%80%81%E6%B3%A8%E5%86%8Ck8s-node%E8%8A%82%E7%82%B9\">#</a></h1>\n<p>向集群添加新节点，执行在kubeadm init输出的kubeadm join命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 如果Token失效，重新生成</span>\nkubeadm token create --print-join-command\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 注册从节点</span>\nkubeadm join 192.168.137.101:6443 --token ftlxtx.pqomr1j82debo3ph \\\n    --discovery-token-ca-cert-hash sha256:6406f96f7b11ef7ed750c4da41ac825a63bca63d8dece634197abc23184371ab\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 查看集群节点</span>\nkubectl get nodes\nNAME     STATUS     ROLES    AGE     VERSION\nmaster   NotReady   master   5m22s   v1.18.0\nnode1    NotReady   &lt;none&gt;   77s     v1.18.0\n</code></pre>\n<pre><code class=\"language-shell\">W0823 17:57:30.170836    8459 join.go:346] [preflight] WARNING: JoinControlPane.controlPlane settings will be ignored when control-plane flag is not set.\n[preflight] Running pre-flight checks\n        [WARNING IsDockerSystemdCheck]: detected \"cgroupfs\" as the Docker cgroup driver. The recommended driver is \"systemd\". Please follow the guide at https://kubernetes.io/docs/setup/cri/\n[preflight] Reading configuration from the cluster...\n[preflight] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -oyaml'\n[kubelet-start] Downloading configuration for the kubelet from the \"kubelet-config-1.18\" ConfigMap in the kube-system namespace\n[kubelet-start] Writing kubelet configuration to file \"/var/lib/kubelet/config.yaml\"\n[kubelet-start] Writing kubelet environment file with flags to file \"/var/lib/kubelet/kubeadm-flags.env\"\n[kubelet-start] Starting the kubelet\n[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...\n\nThis node has joined the cluster:\n* Certificate signing request was sent to apiserver and a response was received.\n* The Kubelet was informed of the new secure connection details.\n\nRun 'kubectl get nodes' on the control-plane to see this node join the cluster.\n</code></pre>\n<h1 id=\"%E4%BA%94%E3%80%81%E9%83%A8%E7%BD%B2%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%EF%BC%88cni%EF%BC%89\">五、部署容器网络（CNI） <a class=\"header-anchor\" href=\"#%E4%BA%94%E3%80%81%E9%83%A8%E7%BD%B2%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%EF%BC%88cni%EF%BC%89\">#</a></h1>\n<h3 id=\"1.-%E5%9C%A8master%E8%8A%82%E7%82%B9%E9%83%A8%E7%BD%B2flannel\">1. 在Master节点部署flannel <a class=\"header-anchor\" href=\"#1.-%E5%9C%A8master%E8%8A%82%E7%82%B9%E9%83%A8%E7%BD%B2flannel\">#</a></h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 下载flannel启动文件</span>\nwget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 查看Pods状态</span>\nkubectl get pods -A\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 执行网络安装配置</span>\nkubectl apply -f kube-flannel.yml\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 安装完成后查询网络</span>\nkubectl get pods -A\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> kubectl get pods -n kube-system</span>\n</code></pre>\n<p>安装前后执行结果</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 安装前</span>\n[lorch@master ~]$ kubectl get pods -n kube-system\nNAME                             READY   STATUS    RESTARTS   AGE\ncoredns-7ff77c879f-k82td         0/1     Pending   0          5m45s\ncoredns-7ff77c879f-ldvq8         0/1     Pending   0          5m45s\netcd-master                      1/1     Running   0          5m55s\nkube-apiserver-master            1/1     Running   0          5m55s\nkube-controller-manager-master   1/1     Running   0          5m55s\nkube-proxy-565f8                 1/1     Running   0          5m45s\nkube-proxy-hfzcx                 1/1     Running   0          2m\nkube-scheduler-master            1/1     Running   0          5m55s\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 安装后</span>\nNAMESPACE      NAME                             READY   STATUS    RESTARTS   AGE\nkube-flannel   kube-flannel-ds-lm4rc            1/1     Running   0          2m52s\nkube-flannel   kube-flannel-ds-vg2db            1/1     Running   0          2m52s\nkube-system    coredns-7ff77c879f-k82td         1/1     Running   0          7m43s\nkube-system    coredns-7ff77c879f-ldvq8         1/1     Running   0          7m43s\nkube-system    etcd-master                      1/1     Running   0          7m53s\nkube-system    kube-apiserver-master            1/1     Running   0          7m53s\nkube-system    kube-controller-manager-master   1/1     Running   0          7m53s\nkube-system    kube-proxy-565f8                 1/1     Running   0          7m43s\nkube-system    kube-proxy-hfzcx                 1/1     Running   0          3m58s\nkube-system    kube-scheduler-master            1/1     Running   0          7m53s\n</code></pre>\n<h3 id=\"2.-%E7%BB%99%E9%9B%86%E7%BE%A4%E6%89%93tag%EF%BC%88%E8%B7%B3%E8%BF%87%EF%BC%89\">2. 给集群打Tag（跳过） <a class=\"header-anchor\" href=\"#2.-%E7%BB%99%E9%9B%86%E7%BE%A4%E6%89%93tag%EF%BC%88%E8%B7%B3%E8%BF%87%EF%BC%89\">#</a></h3>\n<pre><code class=\"language-shell\">kubectl label node k8s-node1 node.kubernetes.io/worker=''\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> k8s-node1是节点的hostname</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> node.kubernetes.io是固定写法不可变</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> worker是给节点加的标签</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> =<span class=\"hljs-string\">''</span>无所谓，<span class=\"hljs-string\">''</span>里面可以随便写</span>\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 去除标签采用命令</span>\nkubectl label node k8s-node1 node.kubernetes.io/worker-\n</code></pre>\n<h3 id=\"3.-%E8%AE%BE%E7%BD%AEipvs%E6%A8%A1%E5%BC%8F%EF%BC%88%E8%B7%B3%E8%BF%87%EF%BC%89\">3. 设置ipvs模式（跳过） <a class=\"header-anchor\" href=\"#3.-%E8%AE%BE%E7%BD%AEipvs%E6%A8%A1%E5%BC%8F%EF%BC%88%E8%B7%B3%E8%BF%87%EF%BC%89\">#</a></h3>\n<p>因为linux默认采用的是iptables模式，性能开销非常大，当你集群节点一多，每个节点的kube-proxy都要去同步iptables，可能一天都同步不完。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看kube-proxy默认的模式</span>\nkubectl logs -n kube-system kube-proxy-565f8\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 打开编辑kube-proxy的配置文件</span>\nkubectl edit cm kube-proxy -n kube-system\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 找到如下配置：</span>\nipvs:\n   excludeCIDRs: null\n   minSyncPeriod: 0s\n   scheduler: \"\"\n   strictARP: false\n   syncPeriod: 0s\n   tcpFinTimeout: 0s\n   tcpTimeout: 0s\n   udpTimeout: 0s\nkind: KubeProxyConfiguration\nmetricsBindAddress: \"\"\nmode: \"\"\n</code></pre>\n<p>mode中加入ipvs，保存后退出。</p>\n<h3 id=\"4.-%E9%87%8D%E5%90%AFkube-proxy%EF%BC%88%E8%B7%B3%E8%BF%87%EF%BC%89\">4. 重启kube-proxy（跳过） <a class=\"header-anchor\" href=\"#4.-%E9%87%8D%E5%90%AFkube-proxy%EF%BC%88%E8%B7%B3%E8%BF%87%EF%BC%89\">#</a></h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看所有Pods</span>\nkubectl get pod -A -o wide\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 找到kube-proxy-565f8 ，删除他，不用担心他会自动重启，配置就生效了，-n后面跟的是他的命名空间。</span>\nkubectl delete pod kube-proxy-565f8 -n kube-system\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 等待重启后重新查看状态</span>\nkubectl get pod -A | grep kube-proxy\n</code></pre>\n<h1 id=\"%E5%85%AD%E3%80%81%E9%83%A8%E7%BD%B2%E5%AE%98%E6%96%B9dashboard%EF%BC%88ui%EF%BC%89\">六、部署官方Dashboard（UI） <a class=\"header-anchor\" href=\"#%E5%85%AD%E3%80%81%E9%83%A8%E7%BD%B2%E5%AE%98%E6%96%B9dashboard%EF%BC%88ui%EF%BC%89\">#</a></h1>\n<h3 id=\"1.-%E9%83%A8%E7%BD%B2dashboard\">1. 部署Dashboard <a class=\"header-anchor\" href=\"#1.-%E9%83%A8%E7%BD%B2dashboard\">#</a></h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 下载官方Dashboard文件</span>\nwget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.3/aio/deploy/recommended.yaml\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 安装官方Dashboard</span>\nkubectl apply -f recommended.yaml\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 查看Dashboard启动情况</span>\nkubectl get pods -n kubernetes-dashboard\n\nNAME                                         READY   STATUS              RESTARTS   AGE\ndashboard-metrics-scraper-6b4884c9d5-94r7k   0/1     ContainerCreating   0          3s\nkubernetes-dashboard-7f99b75bf4-xgvf6        0/1     ContainerCreating   0          4s\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 查看Dashboard服务</span>\nkubectl get svc -n kubernetes-dashboard\n\nNAME                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\ndashboard-metrics-scraper   ClusterIP   10.110.248.145   &lt;none&gt;        8000/TCP   15h\nkubernetes-dashboard        ClusterIP   10.96.248.50     &lt;none&gt;        443/TCP    15h\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 删除现有的Dashboard服务</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 该服务的类型是ClusterIP，不便于我们通过浏览器访问，因此需要改成NodePort型的</span>\nkubectl delete service kubernetes-dashboard -n kubernetes-dashboard\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 修改配置</span>\nkind: Service\napiVersion: v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nspec:\n<span class=\"hljs-meta\">  #</span><span class=\"bash\"> 增加<span class=\"hljs-built_in\">type</span>为 nodePort</span>\n  type: NodePort\n  ports:\n    - port: 443\n      targetPort: 8443\n      # 设置映射的端口\n      nodePort: 30001\n  selector:\n    k8s-app: kubernetes-dashboard\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 再次部署</span>\nkubectl apply -f recommended.yaml\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 再次查看服务</span>\nkubectl get svc -n kubernetes-dashboard\n\nNAME                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)         AGE\ndashboard-metrics-scraper   ClusterIP   10.110.248.145   &lt;none&gt;        8000/TCP        16h\nkubernetes-dashboard        NodePort    10.96.248.50     &lt;none&gt;        443:30001/TCP   16h\n</code></pre>\n<p>访问地址：<a href=\"http://192.168.137.101:30001\">http://192.168.137.101:30001</a></p>\n<pre><code class=\"language-shell\">kubectl get deployment --namespace=kubernetes-dashboard kubernetes-dashboard\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 或</span>\nkubectl describe deployment --namespace=kubernetes-dashboard kubernetes-dashboard\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 查看service</span>\nkubectl get service --namespace=kubernetes-dashboard kubernetes-dashboard\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 另外查看pod状态</span>\nkubectl get pod --namespace=kubernetes-dashboard -o wide | grep dashboard\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 输出</span>\ndashboard-metrics-scraper-6b4884c9d5-94r7k   1/1     Running   1          14h   10.244.1.4   node1   &lt;none&gt;           &lt;none&gt;\nkubernetes-dashboard-7f99b75bf4-xgvf6        1/1     Running   1          14h   10.244.1.5   node1   &lt;none&gt;           &lt;none&gt;\n</code></pre>\n<p>如果状态一直是 ContainerCreating, 使用describe查看具体过程</p>\n<pre><code class=\"language-shell\">kubectl describe pod --namespace=kubernetes-dashboard\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 输出</span>\nEvents:\n  Type    Reason     Age        From               Message\n  ----    ------     ----       ----               -------\n  Normal  Scheduled  &lt;unknown&gt;  default-scheduler  Successfully assigned kubernetes-dashboard/kubernetes-dashboard-7b544877d5-cd2b7 to ttg12\n  Normal  Pulling    9m36s      kubelet, ttg12     Pulling image \"kubernetesui/dashboard:v2.0.0\"\n</code></pre>\n<h3 id=\"2.-%E5%88%9B%E5%BB%BAserviceaccount%E5%B9%B6%E7%BB%91%E5%AE%9A%E9%BB%98%E8%AE%A4cluster-admin%E7%AE%A1%E7%90%86%E5%91%98%E9%9B%86%E7%BE%A4%E8%A7%92%E8%89%B2%EF%BC%9A\">2. 创建ServiceAccount并绑定默认cluster-admin管理员集群角色： <a class=\"header-anchor\" href=\"#2.-%E5%88%9B%E5%BB%BAserviceaccount%E5%B9%B6%E7%BB%91%E5%AE%9A%E9%BB%98%E8%AE%A4cluster-admin%E7%AE%A1%E7%90%86%E5%91%98%E9%9B%86%E7%BE%A4%E8%A7%92%E8%89%B2%EF%BC%9A\">#</a></h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 创建用户</span>\nkubectl create serviceaccount dashboard-admin -n kube-system\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 用户授权</span>\nkubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 获取用户Token</span>\nkubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk '/dashboard-admin/{print $1}')\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 使用输出的Token登录Dashboard。</span>\n\nName:         dashboard-admin-token-9jtrl\nNamespace:    kube-system\nLabels:       &lt;none&gt;\nAnnotations:  kubernetes.io/service-account.name: dashboard-admin\n              kubernetes.io/service-account.uid: c5ce8850-1c33-41e7-b17d-336bcde4ec6e\n\nType:  kubernetes.io/service-account-token\n\nData\n====\nca.crt:     1025 bytes\nnamespace:  11 bytes\ntoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6Il9HcDhZZmNiVTVHVTZsbDhxY29DNVUybnYzREZxMFUySGpLYmVxWGtyU1EifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4tOWp0cmwiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiYzVjZTg4NTAtMWMzMy00MWU3LWIxN2QtMzM2YmNkZTRlYzZlIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmRhc2hib2FyZC1hZG1pbiJ9.dK2ITEiw1hpWWugY5hOoLFF1-AA_9S--pQNjKZ6UiTkKcizZl4AjLyga7iPvBPFxfxBBe0xmfGHrFN0tO7NzY9XEZyXtLfUNSkF1xHwnM-IfyMOA2td2B7hFwA11G5Bl7fP-QSW_g0n8brokh6znQQ5Bbtziaih2ZM-zkyq-BRqMovukXnZW0k2OFyUMzCXV5NmgVrDCr_yg2LbkIYgv_B1uUZpd6A5Ebkxo6CYFxAhXQdUl4doh3Lq0HwuPfe7Pu0vK_1KmdLXQoTNQpwXlBmNh0THA4A0MxlC_VpxUUkrghh0qf3J1-uWo7X2YD41TMfudeTfcfPFewB47yNgyyg\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 读取token</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> kubectl get secret -n kube-system | grep admin | awk <span class=\"hljs-string\">'{print $1}'</span></span>\nkubectl describe secret -n kube-system $(kubectl get secret -n kube-system | grep admin | awk '{print $1}')  | grep '^token' | awk '{print $2}'\n\neyJhbGciOiJSUzI1NiIsImtpZCI6Il9HcDhZZmNiVTVHVTZsbDhxY29DNVUybnYzREZxMFUySGpLYmVxWGtyU1EifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4tOWp0cmwiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiYzVjZTg4NTAtMWMzMy00MWU3LWIxN2QtMzM2YmNkZTRlYzZlIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmRhc2hib2FyZC1hZG1pbiJ9.dK2ITEiw1hpWWugY5hOoLFF1-AA_9S--pQNjKZ6UiTkKcizZl4AjLyga7iPvBPFxfxBBe0xmfGHrFN0tO7NzY9XEZyXtLfUNSkF1xHwnM-IfyMOA2td2B7hFwA11G5Bl7fP-QSW_g0n8brokh6znQQ5Bbtziaih2ZM-zkyq-BRqMovukXnZW0k2OFyUMzCXV5NmgVrDCr_yg2LbkIYgv_B1uUZpd6A5Ebkxo6CYFxAhXQdUl4doh3Lq0HwuPfe7Pu0vK_1KmdLXQoTNQpwXlBmNh0THA4A0MxlC_VpxUUkrghh0qf3J1-uWo7X2YD41TMfudeTfcfPFewB47yNgyyg\n</code></pre>\n<h1 id=\"%E4%B8%83%E3%80%81%E7%8A%B6%E6%80%81%E6%9F%A5%E7%9C%8B\">七、状态查看 <a class=\"header-anchor\" href=\"#%E4%B8%83%E3%80%81%E7%8A%B6%E6%80%81%E6%9F%A5%E7%9C%8B\">#</a></h1>\n<ol>\n<li>查看节点状态</li>\n</ol>\n<blockquote>\n<p>kubectl get nodes</p>\n</blockquote>\n<ol start=\"2\">\n<li>查看pod状态</li>\n</ol>\n<blockquote>\n<p>kubectl get pod --all-namespaces</p>\n</blockquote>\n<ol>\n<li>查看副本数</li>\n</ol>\n<blockquote>\n<p>kubectl get deployments --all-namespaces\nkubectl get pod -o wide --all-namespaces</p>\n</blockquote>\n<ol start=\"4\">\n<li>查看deployment详细信息</li>\n</ol>\n<blockquote>\n<p>kubectl describe deployments --all-namespaces</p>\n</blockquote>\n<ol start=\"5\">\n<li>查看集群基本组件状态</li>\n</ol>\n<blockquote>\n<p>kubectl get cs</p>\n</blockquote>\n<pre><code class=\"language-shell\">NAME                 STATUS    MESSAGE             ERROR\nscheduler            Healthy   ok\ncontroller-manager   Healthy   ok\netcd-0               Healthy   {\"health\":\"true\"}\n</code></pre>\n<h1 id=\"%E5%85%AB%E3%80%81%E9%83%A8%E7%BD%B2%E4%B8%9A%E5%8A%A1%E6%9C%8D%E5%8A%A1\">八、部署业务服务 <a class=\"header-anchor\" href=\"#%E5%85%AB%E3%80%81%E9%83%A8%E7%BD%B2%E4%B8%9A%E5%8A%A1%E6%9C%8D%E5%8A%A1\">#</a></h1>\n<h3 id=\"1.-%E5%88%9B%E5%BB%BA%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4\">1. 创建命名空间 <a class=\"header-anchor\" href=\"#1.-%E5%88%9B%E5%BB%BA%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4\">#</a></h3>\n<blockquote>\n<p>kubectl create namespace svc-pd-service</p>\n</blockquote>\n<h3 id=\"2.-%E7%BC%96%E5%86%99yaml%E6%96%87%E4%BB%B6\">2. 编写yaml文件 <a class=\"header-anchor\" href=\"#2.-%E7%BC%96%E5%86%99yaml%E6%96%87%E4%BB%B6\">#</a></h3>\n<pre><code class=\"language-yaml\">\n</code></pre>\n<h3 id=\"3.-%E6%89%A7%E8%A1%8C%E9%83%A8%E7%BD%B2\">3. 执行部署 <a class=\"header-anchor\" href=\"#3.-%E6%89%A7%E8%A1%8C%E9%83%A8%E7%BD%B2\">#</a></h3>\n<pre><code class=\"language-shell\">\n</code></pre>\n<h1 id=\"%E5%8D%81%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86\">十、异常处理 <a class=\"header-anchor\" href=\"#%E5%8D%81%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86\">#</a></h1>\n<ol>\n<li>CGroup与Docker不匹配，CPU核心数至少要两个，需要关闭Swap分区</li>\n</ol>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 报错</span>\nW0823 17:37:30.758727    2645 configset.go:202] WARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]\n[init] Using Kubernetes version: v1.18.0\n[preflight] Running pre-flight checks\n        [WARNING IsDockerSystemdCheck]: detected \"cgroupfs\" as the Docker cgroup driver. The recommended driver is \"systemd\". Please follow the guide at https://kubernetes.io/docs/setup/cri/\nerror execution phase preflight: [preflight] Some fatal errors occurred:\n        [ERROR NumCPU]: the number of available CPUs 1 is less than the required 2\n        [ERROR Swap]: running with swap on is not supported. Please disable swap\n[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`\nTo see the stack trace of this error execute with --v=5 or higher\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 解决方案</span>\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 查看docker的 Cgroup Driver，显示为cgroupfs，而kubelet为systemd</span>\nsudo docker info | grep Cgroup \n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 加入 <span class=\"hljs-string\">\"exec-opts\"</span>: [<span class=\"hljs-string\">\"native.cgroupdriver=systemd\"</span>]</span>\nvim /etc/docker/daemon.json\n\"exec-opts\": [\"native.cgroupdriver=systemd\"]\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 重启Docker和K8s</span>\nsystemctl daemon-reload &amp;&amp; systemctl restart docker &amp;&amp; systemctl restart kubelet\n</code></pre>\n",
  "link": "/en-us/docs/K8s/K8s-Single-Master-Cluster.html",
  "meta": {}
}