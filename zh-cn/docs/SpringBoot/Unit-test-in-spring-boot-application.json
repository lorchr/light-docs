{
  "filename": "Unit-test-in-spring-boot-application.md",
  "__html": "<p>Spring Boot 提供了丰富的测试功能，主要由以下两个模块组成：</p>\n<p>● spring-boot-test：提供测试核心功能。</p>\n<p>● spring-boot-test-autoconfigure：提供对测试的自动配置。</p>\n<p>Spring Boot 提供了一个 spring-boot-starter-test一站式启动器，如以下依赖配置所示。</p>\n<dependency>\n <groupId>org.springframework.boot</groupId>\n <artifactId>spring-boot-starter-test</artifactId>\n <scope>test</scope>\n</dependency>\n测试启动器依赖不仅包含以上两个 Spring Boot模块，还包含 Spring Test 测试模块，以及其他\n<p>第三方测试类库，如下所示。</p>\n<p>● JUnit 5：Java 最主流的单元测试框架。</p>\n<p>● AssertJ：一款快速断言库。</p>\n<p>● Hamcrest：一款单元测试匹配库。</p>\n<p>● Mockito：一款 Mock 测试框架。</p>\n<p>● JSONassert：一款 JSON 断言库。</p>\n<p>● JsonPath：一款 JSON XPath 库。</p>\n<p>更多测试相关的依赖可见具体的依赖关系树，如下图所示。</p>\n<p>图片</p>\n<p>以上这些都是 Spring Boot 提供的常用的测试类库，如果上面的测试类库还不能满足你的需要，也可以任意添加以上没有的类库。</p>\n<p>现在基本上使用的是 JUnit 5，如果应用还在使用JUnit 4 写的单元测试用例，那么也可以使用JUnit 5 的 Vintage 引擎来运行，如下面的依赖配置所示。</p>\n<dependency>\n <groupId>org.junit.vintage</groupId>\n <artifactId>junit-vintage-engine</artifactId>\n <scope>test</scope>\n <exclusions>\n <exclusion>\n <groupId>org.hamcrest</groupId>\n <artifactId>hamcrest-core</artifactId>\n </exclusion>\n </exclusions>\n</dependency>\n需要排除 hamcrest-core 依赖，因为该依赖已经改坐标了，并且默认内置在Spring Boot依赖管理中，如上面的依赖关系树所示，最新的 Hamcrest依赖已经是org.hamcrest:hamcrest坐标了。\n<p>Spring Boot提供了一个 @SpringBootTest 注解，用在单元测试类上以启用支持Spring Boot特性的单元测试，如果使用的是JUnit 4，那么测试类上还需要额外的@RunWith(SpringRunner. class)注解，然后在测试类方法上添加 @Test 注解即可，每一个 @Test 注解修饰的方法就是一个单元测试方法。</p>\n<p>@SpringBootTest 注解有一个最重要的 webEnvironment 环境参数，支持以下几种环境设置：</p>\n<p>●MOCK（默认）：加载一个 Web ApplicationContext 并提供一个 Mock Web Environment，但不会启动内嵌的 Web 服务器，并可以结合 @AutoConfifigureMockMvcor 和 @AutoConfifigure-WebTestClient 注解一起使用进行 Mock 测试。</p>\n<p>● RANDOM_PORT：加载一个 WebServerApplicationContext，以及提供一个真实的 WebEnvironment，并以随机端口启动内嵌服务器。</p>\n<p>●DEFINED_PORT：和 RANDOM_PORT 一样，不同的是 DEFINED_PORT 是以应用指定的端口运行的，默认端口为 8080。</p>\n<p>●NONE：加载一个 ApplicationContext，但不会提供任何 Web Environment。</p>\n<p>如果使用的 @SpringBootTest 注解不带任何参数，则默认为 Mock 环境。</p>\n<p>真实环境测试</p>\n<p>在 @SpringBootTest 注解中指定基于随机端口的真实Web环境，然后在类成员变量或者方法参数上注入 TestRestTemplate 实例，就可以完成对 Spring MVC接口的真实环境测试。</p>\n<p>下面是一个基于随机端口的真实环境的测试用例：</p>\n<p>@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\npublic class MvcTest {\n@Test\npublic void getUserTest(@Autowired TestRestTemplate testRestTemplate) {\nMap&lt;String, String&gt; multiValueMap = new HashMap&lt;&gt;();\nmultiValueMap.put(&quot;username&quot;, &quot;Java 技术栈 &quot;);\nResult result = testRestTemplate.getForObject(&quot;/user/get?username={username}&quot;,\nResult.class, multiValueMap);\nassertThat(result.getCode()).isEqualTo(0);\nassertThat(result.getMsg()).isEqualTo(&quot;ok&quot;);\n}</p>\n<p>}\n测试当前应用下的 /user/get 接口，传入对应的用户名参数，最后检查接口返回结果是否和预期一致，测试结果如下图所示。</p>\n<p>图片</p>\n<p>单元测试通过，从执行日志可以看到，它启动了一个嵌入式的 Tomcat 容器来测试真实的 Web应用环境。</p>\n<p>Mock 环境测试</p>\n<p>通过在类上面使用 @AutoConfifigureMockMvc 注解，然后在类成员变量或者方法参数上注入MockMvc 实例，就可以完成对 Spring MVC 接口的 Mock 测试。</p>\n<p>下面是一个基于默认 Mock 环境的测试用例：</p>\n<p>@SpringBootTest\n@AutoConfigureMockMvc\nclass MockMvcTests {\n@Test\npublic void getUserTest(@Autowired MockMvc mvc) throws Exception {\nmvc.perform(MockMvcRequestBuilders.get(&quot;/user/get?username={username}&quot;, &quot;test&quot;))\n.andExpect(status().isOk())\n.andExpect(content().string(&quot;{&quot;code&quot;:0,&quot;msg&quot;:&quot;ok&quot;,&quot;\ndata&quot;:&quot;test&quot;}&quot;));\n}\n}\n测试当前应用下的 /user/get 接口，传入对应的用户名参数，最后检查请求状态是否OK（200），响应的内容是否和预期一致，测试结果如下图所示。</p>\n<p>图片</p>\n<p>单元测试通过，从执行日志可以看到，它并未启动真实的 Web 环境来测试，而是使用 Mock 环境测试的。</p>\n<p>Mock 组件测试</p>\n<p>某些时候可能还需要模拟一些组件，比如某些服务只有上线之后才能调用，在开发阶段不可用，这时就需要 Mock 模拟测试了，提供各种模拟组件以完成测试。</p>\n<p>Spring Boot 提供了一个 @MockBean 注解，可为 Spring 中的 Bean 组件定义基于 Mockito 的Mock 测试，它可以创建一个新 Bean 以覆盖 Spring 环境中已有的 Bean，它可以用在测试类、成员变量上，或者 @Confifiguration 配置类、成员变量上，被模拟的 Bean 在每次测试结束后自动重置。</p>\n<p>假现现在有一个远程的服务 userService，本地不能调用，现在进行 Mock 测试，如以下使用示例所示。</p>\n<p>@SpringBootTest\nclass MockBeanTests {\n// @Autowired\n// private UserService userService;\n@MockBean\nprivate UserService userService;\n@Test\npublic void countAllUsers() {\nBDDMockito.given(this.userService.countAllUsers()).willReturn(88);\nassertThat(this.userService.countAllUsers()).isEqualTo(88);\n}\n}\n这里的 @MockBean 注解使用在 UserService 变量上，表明这个userService实例在当前测试用例中是被 Mock 覆盖的，如果要模拟的 Bean 有多个，则可以使用@Qualififier注解指定，然后通过Mockito 提供的代理工具类方法创建模拟返回数据，运行该服务的测试方法，当模拟数据和预期结果一致时才会测试通过。</p>\n<p>这里通过 BDDMockito 工具类模拟 userService#countAllUsers方法并让它返回统计的用户总数（88），最后检查该方法的返回值是否和预期一致，测试结果如下图所示。</p>\n<p>图片</p>\n<p>单元测试通过，也可以使用 @SpyBean 注解代替 @MockBean 注解，两者的区别是：</p>\n<p>● @SpyBean—如果没有提供 Mockito 代理方法，则会调用真实的 Bean 来获取数据。</p>\n<p>● @MockBean—不管有没有提供 Mockito 代理方法，都会调用 Mock 的 Bean 来获取数据。</p>\n<p>@MockBean、@SpyBean 注解既可作用于 Mock 环境，也可作用于真实环境，它只是用来模拟、替换环境中指定的 Bean 而已，但不能用于模拟在应用上下文刷新期间 Bean 的行为，因为在执行测试用例时应用上下文已经刷新完成了，所以不可能再去模拟了，这种情况下建议使用 @Bean 方法来创建模拟配置。</p>\n",
  "link": "/zh-cn/docs/SpringBoot/Unit-test-in-spring-boot-application.html",
  "meta": {}
}