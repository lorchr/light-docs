{
  "filename": "06-Install-Jenkins.md",
  "__html": "<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>服务</th>\n<th>IP</th>\n<th>Port</th>\n<th>URL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Gitea</td>\n<td>192.168.137.101</td>\n<td>3000</td>\n<td><a href=\"http://192.168.137.101:3000/\">http://192.168.137.101:3000/</a></td>\n</tr>\n<tr>\n<td>2</td>\n<td>Mysql</td>\n<td>192.168.137.101</td>\n<td>3306</td>\n<td>jdbc:mysql://192.168.137.101:3306/gitea</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Jenkins</td>\n<td>192.168.137.101</td>\n<td>18080</td>\n<td><a href=\"http://192.168.137.101:18080/\">http://192.168.137.101:18080/</a></td>\n</tr>\n<tr>\n<td>4</td>\n<td>Registry</td>\n<td>192.168.137.102</td>\n<td>5000</td>\n<td><a href=\"http://192.168.137.102:5000/\">http://192.168.137.102:5000/</a></td>\n</tr>\n<tr>\n<td>5</td>\n<td>Harbor</td>\n<td>192.168.137.102</td>\n<td>5080</td>\n<td><a href=\"http://192.168.137.102:5080/\">http://192.168.137.102:5080/</a></td>\n</tr>\n<tr>\n<td>6</td>\n<td>Nexus</td>\n<td>192.168.137.102</td>\n<td>18081/18082/18083</td>\n<td><a href=\"http://192.168.137.102:18081/\">http://192.168.137.102:18081/</a></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"%E5%85%AD%E3%80%81-%E5%AE%89%E8%A3%85-jenkins\">六、 安装 Jenkins <a class=\"header-anchor\" href=\"#%E5%85%AD%E3%80%81-%E5%AE%89%E8%A3%85-jenkins\">#</a></h1>\n<ul>\n<li><a href=\"https://jenkins.io/zh/doc/\">https://jenkins.io/zh/doc/</a></li>\n</ul>\n<h2 id=\"1.-%E5%AE%89%E8%A3%85\">1. 安装 <a class=\"header-anchor\" href=\"#1.-%E5%AE%89%E8%A3%85\">#</a></h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看已有的jenkins</span>\nrpm -qa | grep jenkins\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> rpm卸载</span>\nrpm -e jenkins \n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 检查是否卸载成功</span>\nrpm -ql jenkins\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 彻底删除残留文件</span>\nsystemctl stop jenkins\nsudo yum -y remove jenkins\nsudo rm -rf /var/lib/jenkins\nsudo rm -rf /var/cache/jenkins\nsudo rm -rf /var/log/jenkins\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 安装Jenkins</span>\nrpm -ivh jenkins-2.235.5-1.1.noarch.rpm\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 修改Jenkins配置</span>\nvim /etc/sysconfig/jenkins\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 修改内容：</span>\nJENKINS_USER=\"root\"\nJENKINS_PORT=\"18080\"\nJENKINS_JAVA_OPTIONS=\"-Djava.awt.headless=true -Djavax.net.ssl.trustStore=/etc/pki/ca-trust/extracted/java/cacerts\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 设置本机jdk路径</span>\nwhich java # /usr/local/java/jdk1.8.0/bin/java\nvim /etc/init.d/jenkins\ncandidates=\"\"内添加java路径\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 设置权限</span>\nchown -R root:root /var/lib/jenkins\nchown -R root:root /var/log/jenkins\nchown -R root:root /var/cache/jenkins\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 重启jenkins</span>\nsystemctl daemon-reload &amp;&amp; systemctl start jenkins\n</code></pre>\n<p>登录web页面：<a href=\"http://192.168.137.101:18080\">http://192.168.137.101:18080</a></p>\n<ul>\n<li>admin/admin</li>\n</ul>\n<h2 id=\"2.-%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE-jenkins\">2. 初始化配置 Jenkins <a class=\"header-anchor\" href=\"#2.-%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE-jenkins\">#</a></h2>\n<p>这里登录需要使用到一个管理员密码，我们可以在服务器上使用如下命令获得</p>\n<blockquote>\n<p>cat /var/lib/jenkins/secrets/initialAdminPassword</p>\n</blockquote>\n<ol>\n<li>更新Jenkins到最新版本</li>\n<li>安装插件</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>插件</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Locale</td>\n<td>中文</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Localization: Chinese (Simplified)</td>\n<td>中文</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Localization Support</td>\n<td>中文</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Deploy to container Plugin</td>\n<td>打包镜像</td>\n</tr>\n<tr>\n<td>5</td>\n<td>Publish over SSH</td>\n<td>推送镜像</td>\n</tr>\n<tr>\n<td>6</td>\n<td>Gitea/Gitlab/Gitee/Github</td>\n<td>代码仓库</td>\n</tr>\n<tr>\n<td>6</td>\n<td>Git</td>\n<td>拉取代码</td>\n</tr>\n<tr>\n<td>7</td>\n<td>Git client</td>\n<td>拉取代码</td>\n</tr>\n<tr>\n<td>8</td>\n<td>Maven Integration</td>\n<td>后端打包</td>\n</tr>\n<tr>\n<td>8</td>\n<td>NodeJS</td>\n<td>前端打包</td>\n</tr>\n</tbody>\n</table>\n<p><strong>暂时不要替换插件源，进入jenkins直接升级版本，升级到最高版本后，所有插件即可安装</strong></p>\n<p>如果安装很慢，可以先设置国内的插件源</p>\n<pre><code class=\"language-shell\">systemctl stop jenkins\nvim /var/lib/jenkins/hudson.model.UpdateCenter.xml\n\n&lt;?xml version='1.1' encoding='UTF-8'?&gt;\n&lt;sites&gt;\n  &lt;site&gt;\n    &lt;id&gt;default&lt;/id&gt;\n    &lt;url&gt;http://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json&lt;/url&gt;\n  &lt;/site&gt;\n&lt;/sites&gt;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 或在页面中Manage Jenkins–&gt;Manage Plugins点击Advanced后拉到最下面，将红色方框内的链接修为</span>\nhttp://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 重启jenkis</span>\nsystemctl daemon-reload &amp;&amp; systemctl start jenkins\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 如果启动报错缺少policycoreutils-python，可以使用下面命令来解决</span>\nyum install -y curl policycoreutils-python openssh-server\n</code></pre>\n<h2 id=\"3.-%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98\">3. 安装问题 <a class=\"header-anchor\" href=\"#3.-%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98\">#</a></h2>\n<ol>\n<li>更新版本</li>\n</ol>\n<blockquote>\n<p><a href=\"https://mirrors.tuna.tsinghua.edu.cn/jenkins/war-stable/2.332.4/\">https://mirrors.tuna.tsinghua.edu.cn/jenkins/war-stable/2.332.4/</a>\n下载最新war包。放入/usr/lib/jenkins/替换旧版war</p>\n</blockquote>\n<ol start=\"2\">\n<li>安装jenkins后下载插件报错日志如下:</li>\n</ol>\n<pre><code class=\"language-shell\">sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target\n        at sun.security.provider.certpath.SunCertPathBuilder.build(SunCertPathBuilder.java:145)\n        at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:131)\n        at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:280)\n        at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:382)\nCaused: sun.security.validator.ValidatorException: PKIX path building failed\n</code></pre>\n<p>原因:</p>\n<p>默认证书有问题</p>\n<p>解决:</p>\n<ol>\n<li>更新站点</li>\n</ol>\n<blockquote>\n<p><a href=\"http://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json\">http://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a></p>\n</blockquote>\n<ol start=\"2\">\n<li>进入jenkins站点更新目录修改默认json配置</li>\n</ol>\n<pre><code class=\"language-shell\">cd /var/lib/jenkins/updates/\n\n全局替换default.json里面的下载插件地址:\n\nsed -i 's/http:\\/\\/updates.jenkins-ci.org\\/download/http:\\/\\/mirrors.tuna.tsinghua.edu.cn\\/jenkins/g' default.json\nsed -i 's/http:\\/\\/www.google.com/http:\\/\\/www.baidu.com/g' default.json\n</code></pre>\n<ol start=\"3\">\n<li>查找证书路径:</li>\n</ol>\n<blockquote>\n<p>find / -type f -name cacerts</p>\n</blockquote>\n<p>找到了上面的地址: /etc/pki/ca-trust/extracted/java/cacerts</p>\n<ol start=\"4\">\n<li>修改jenkins配置文件</li>\n</ol>\n<blockquote>\n<p>vi /etc/sysconfig/jenkins\nJENKINS_JAVA_OPTIONS=&quot;-Djava.awt.headless=true -Djavax.net.ssl.trustStore=/etc/pki/ca-trust/extracted/java/cacerts&quot;</p>\n</blockquote>\n<ol start=\"5\">\n<li>重启jenkins生效</li>\n</ol>\n<blockquote>\n<p>systemctl daemon-reload &amp;&amp; systemctl restart jenkins</p>\n</blockquote>\n<h2 id=\"4.-%E5%88%9B%E5%BB%BA%E6%9E%84%E5%BB%BA%E4%BB%BB%E5%8A%A1\">4. 创建构建任务 <a class=\"header-anchor\" href=\"#4.-%E5%88%9B%E5%BB%BA%E6%9E%84%E5%BB%BA%E4%BB%BB%E5%8A%A1\">#</a></h2>\n<h3 id=\"1.-%E5%90%8E%E7%AB%AF%E6%89%93%E5%8C%85%E4%BB%BB%E5%8A%A1\">1. 后端打包任务 <a class=\"header-anchor\" href=\"#1.-%E5%90%8E%E7%AB%AF%E6%89%93%E5%8C%85%E4%BB%BB%E5%8A%A1\">#</a></h3>\n<ol>\n<li>创建任务<code>New Item</code>，输入任务名称，选择<code>构建一个Maven项目</code>，点击确认</li>\n<li>描述中输入任务的描述信息: &quot;Spring Boot打包测试&quot;</li>\n<li>点击顶部<code>源码管理</code>选择 <code>Git</code>。</li>\n<li><code>Repository URL</code>中输入仓库地址 <code>http://113.57.121.225:3001/wwb/pi-diginn.git</code></li>\n<li>点击<code>Credentials</code>创建凭证（用户名密码，Token，SSH-Key等）</li>\n<li><code>Branches to build</code>中指定打包的分支</li>\n<li><code>源码库浏览器</code>选择对应的值<code>Gitea</code>，再次输入<code>Repository URL</code></li>\n<li><code>构建环境</code>选中<code>Add timestamps to the Console Output</code>，输出构建日志</li>\n<li><code>Pre-Steps</code>添加<code>Invoke top-level Maven targets</code>打包父工程。POM <code>pd-parent/pom.xml</code> Goals <code>clean install -Dmaven.test.skip=true</code></li>\n<li><code>Build</code>中指定当前构建的项目。POM <code>pd-service-admin/pom.xml</code> Goals <code>clean install -Dmaven.test.skip=true</code></li>\n<li><code>Post Steps</code>添加<code>Execute Shell</code>执行后续Shell脚本。选择 <code>Run only if build succeeds</code>仅当build成功执行</li>\n</ol>\n<h3 id=\"2.-%E5%90%8E%E7%AB%AF%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC\">2. 后端打包脚本 <a class=\"header-anchor\" href=\"#2.-%E5%90%8E%E7%AB%AF%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC\">#</a></h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 定义变量</span>\nAPI_NAME=\"pd-service-admin\"\nAPI_VERSION=\"1.0.0\"\nAPI_PORT=\"31114\"\nEXTERNAL_API_PORT=\"31114\"\nIMAGE_NAME=\"192.168.137.101:5000/$API_NAME:$API_VERSION\"\nCONTAINER_NAME=$API_NAME:$API_VERSION\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 进入target目录并复制Dockerfile文件</span>\ncd $WORKSPACE/$API_NAME/config\ncp Dockerfile ../target\ncd $WORKSPACE/$API_NAME/target\n\necho '================构建Docker镜像=============='\ndocker build -t $IMAGE_NAME .\n\necho '================推送Docker镜像=============='\ndocker login --username=admin --password=admin 192.168.137.101:5000\ndocker push $IMAGE_NAME\ndocker logout\n\necho '================删除Docker容器=============='\ncid=$(docker ps -a | grep $API_NAME |awk '{print $1}')\nif [ x\"$cid\" != x ]\n    then\n    docker rm -f $cid\nfi\n\necho '================启动Docker容器=============='\ndocker run --restart=always --name=$API_NAME -d -p $API_PORT:$EXTERNAL_API_PORT $IMAGE_NAME\n\necho '================删除Dockerfile=============='\nrm -f Dockerfile\n</code></pre>\n<p>使用私服仓库的脚本</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 定义变量</span>\nAPI_NAME=\"pd-service-admin\"\nAPI_VERSION=\"4.0.0\"\nAPI_PORT=\"31114\"\nEXTERNAL_API_PORT=\"31114\"\nIMAGE_NAME=\"192.168.137.102:5080/pi-diginn/$API_NAME:$API_VERSION\"\nCONTAINER_NAME=$API_NAME:$API_VERSION\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 进入target目录并复制Dockerfile文件</span>\ncd $WORKSPACE/$API_NAME/config\ncp Dockerfile ../target\ncd $WORKSPACE/$API_NAME/target\n\necho '================构建Docker镜像=============='\ndocker build -t $IMAGE_NAME .\n\necho '================推送Docker镜像=============='\ndocker login 192.168.137.102:5080\ndocker push $IMAGE_NAME\ndocker logout\n\necho '================删除Docker容器=============='\ncid=$(docker ps -a | grep $API_NAME |awk '{print $1}')\nif [ x\"$cid\" != x ]\n    then\n    docker rm -f $cid\nfi\n\necho '================启动Docker容器=============='\ndocker run --restart=always --name=$API_NAME -d -p $API_PORT:$EXTERNAL_API_PORT $IMAGE_NAME\n\necho '================删除Dockerfile=============='\nrm -f Dockerfile\n</code></pre>\n<h3 id=\"3.-%E5%89%8D%E7%AB%AF%E6%89%93%E5%8C%85%E4%BB%BB%E5%8A%A1\">3. 前端打包任务 <a class=\"header-anchor\" href=\"#3.-%E5%89%8D%E7%AB%AF%E6%89%93%E5%8C%85%E4%BB%BB%E5%8A%A1\">#</a></h3>\n<ol>\n<li>创建任务<code>New Item</code>，输入任务名称，选择<code>Freestyle project</code>，点击确认</li>\n<li>描述中输入任务的描述信息: &quot;Web前端打包测试&quot;</li>\n<li>点击顶部<code>源码管理</code>选择 <code>Git</code>。</li>\n<li><code>Repository URL</code>中输入仓库地址 <code>http://113.57.121.225:3001/wwb/pd-diginn-web.git</code></li>\n<li>点击<code>Credentials</code>创建凭证（用户名密码，Token，SSH-Key等）</li>\n<li><code>Branches to build</code>中指定打包的分支</li>\n<li><code>源码库浏览器</code>选择对应的值<code>Gitea</code>，再次输入<code>Repository URL</code></li>\n<li><code>构建环境</code>选中<code>Add timestamps to the Console Output</code>，输出构建日志</li>\n<li><code>构建环境</code>选择<code>Provide Node &amp; npm bin/ folder to PATH</code>指定使用的Node npm的位置</li>\n<li><code>Build</code>添加<code>Execute Shell</code>执行后续Shell脚本。选择 <code>Run only if build succeeds</code>仅当build成功执行</li>\n</ol>\n<h3 id=\"4.-%E5%89%8D%E7%AB%AF%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC\">4. 前端打包脚本 <a class=\"header-anchor\" href=\"#4.-%E5%89%8D%E7%AB%AF%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC\">#</a></h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看Node和NPM版本</span>\nnode -v\nnpm -v\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 删除之前打包残留</span>\nrm -rf ./dist/\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 安装依赖</span>\nnpm install\nnpm install 'webpack@^4.0.0' -S\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 执行打包</span>\nnpm run build\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 删除Nginx目录下的静态文件</span>\nrm -rf /usr/local/nginx/html/plum\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 将新的静态文件复制到Nginx目录下</span>\ncp -r dist/ /usr/local/nginx/html/plum\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 重启Nginx</span>\nsystemctl restart nginx\n</code></pre>\n<p>使用私服的脚本</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看Node和NPM版本</span>\nnode -v\nnpm -v\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 删除之前打包残留</span>\nrm -rf ./dist/\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 安装依赖</span>\nnpm install --registry=http://192.168.137.102:18081/repository/npm-public/\nnpm install 'webpack@^4.0.0' -S --registry=http://192.168.137.102:18081/repository/npm-public/\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 执行打包</span>\nnpm run build\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 删除Nginx目录下的静态文件</span>\nrm -rf /usr/local/nginx/html/plum\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 将新的静态文件复制到Nginx目录下</span>\ncp -r dist/ /usr/local/nginx/html/plum\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 重启Nginx</span>\nsystemctl restart nginx\n</code></pre>\n",
  "link": "/zh-cn/docs/CI-CD/06-Install-Jenkins.html",
  "meta": {}
}